// <auto-generated />
using System;
using CalendarBot.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CalendarBot.Migrations
{
    [DbContext(typeof(CalendarContext))]
    partial class CalendarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CalendarBot.Models.ExcelInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExcelInfos");
                });

            modelBuilder.Entity("CalendarBot.Models.Implementation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Ante")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Discipline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Hours")
                        .HasColumnType("double precision");

                    b.Property<string>("LessonType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Implementations");
                });

            modelBuilder.Entity("CalendarBot.Models.StudyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcademicDiscipline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ante")
                        .HasColumnType("integer");

                    b.Property<int>("ControlWorks")
                        .HasColumnType("integer");

                    b.Property<double>("CourseProject")
                        .HasColumnType("double precision");

                    b.Property<double>("DepartmentManagement")
                        .HasColumnType("double precision");

                    b.Property<string>("EducationForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("EducationalPractice")
                        .HasColumnType("double precision");

                    b.Property<double>("Exams")
                        .HasColumnType("double precision");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("GEX")
                        .HasColumnType("double precision");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<double>("GraduationProject")
                        .HasColumnType("double precision");

                    b.Property<int>("Groups")
                        .HasColumnType("integer");

                    b.Property<double>("Internship")
                        .HasColumnType("double precision");

                    b.Property<int>("LabLesson")
                        .HasColumnType("integer");

                    b.Property<int>("LabLessonOffline")
                        .HasColumnType("integer");

                    b.Property<int>("Lectures")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfTests")
                        .HasColumnType("integer");

                    b.Property<int>("OfflineLectures")
                        .HasColumnType("integer");

                    b.Property<double>("Score")
                        .HasColumnType("double precision");

                    b.Property<int>("SemLessons")
                        .HasColumnType("integer");

                    b.Property<int>("SemLessonsOffline")
                        .HasColumnType("integer");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentAmount")
                        .HasColumnType("integer");

                    b.Property<int>("Subgroups")
                        .HasColumnType("integer");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TotalHours")
                        .HasColumnType("double precision");

                    b.Property<int>("USRControl")
                        .HasColumnType("integer");

                    b.Property<double>("UnderGraduatesLessons")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Plans");
                });
#pragma warning restore 612, 618
        }
    }
}
